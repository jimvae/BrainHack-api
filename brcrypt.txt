npm isntall bcrypt-nodejs

for security,
always send sensitive data through http request post, in a form body 
(preventing it from appearing to query strings)

post requests are never cached and will not remain in the browser history

bscript alternatives: argon2, scrypt
but bscript is still favourable because it is 15 years old

argon2 has good prospects tho so keep them in mind in the future

Now you might be asking yourself, why not just use a hashing function like SHA256, 
add a salt (randomly generated bytes to place in front of the password) for each user, 
and store those in a database? The problem with computing power increasing is that 
attackers can now use GPUs to try out passwords at over 100 million per second and see 
if they get a hit. That’s why you want to use hash functions that were specifically designed 
to be slow. Although it is fast enough so the user won’t notice (about 100ms), 
it is long enough to make it infeasible for an attacker to try out a long list of passwords. 
bcrypt allows you to add a saltRound (10 is the recommended value) which iterates 2^10, 
or 1024 times over the password in a process called key stretching. 
Finally, bcrypt implementation is also safe from timing attacks. 
Here is a simple overview of how to use bcrypt for password management. 
(you can check out their repo for more detail):